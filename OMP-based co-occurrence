library(ShortRead)
library(Biostrings)
library(phyloseq)
library(vegan)
library(ecodist)
library(igraph)
library(bipartite)
library(reshape2)
library(doParallel)
library(parallel)
library(foreach)

###### OMP based co-occurrence analysis
# Input dataframe of community data, target the abundance data of co-exsited taxon pairs, then calculate edge properties with cor.test
df2edge.bi.mod <- function(inputdf) 
	{
	results<-matrix(nrow=0,ncol=6)
	for (i in 1:(dim(inputdf)[2]-1)) 
		{

		tempresultdf <- foreach (j = (i+1):dim(inputdf)[2], .combine=data.frame, .packages = c("ShortRead", "Biostrings","phyloseq","vegan")) %dopar%
			{
			tempx <- as.vector(inputdf[, i])
			tempy <- as.vector(inputdf[, j])
            species1.ab<-sum(tempx)
            species2.ab<-sum(tempy)

			nonZero <- tempx*tempy != 0
			tempx <- tempx[nonZero]
			tempy <- tempy[nonZero]

			if(length(tempx)>2)
			{
                test<-cor.test(tempx, tempy, method="spearman", na.action=na.rm)
                rho<-as.numeric(test$estimate)
                p.value<-as.numeric(test$p.value)
			}
			else
			{
				rho <- 0
				p.value <- 1
			}
			new.row<-c(colnames(inputdf)[i],colnames(inputdf)[j],rho,p.value,species1.ab,species2.ab)
			}
			gc()
			results<-rbind(results,t(tempresultdf))
            rm(tempresultdf)
			print(paste(i, "out of", dim(inputdf)[2], sep = " "))
		}
	# results <- as.data.frame(results)
	colnames(results)<-c("ASV1","ASV2","rho","p.value","ab1","ab2")
	results
	}

ps2edgels.bi <- function(inputps)
	{
	tempdf <- as.data.frame(as(otu_table(inputps),"matrix"))
	colnames(tempdf) <- as.data.frame(tax_table(inputps))[,dim(tax_table(inputps))[2]]
	tempedgels <- df2edge.bi.mod(tempdf)
	tempedgels
	}

###### non-OMP based co-occurrence analysis
# Input dataframe of community data,and calculate edge properties with cor.test
df2edge <- function(inputdf) 
	{
	results<-matrix(nrow=0,ncol=6)
	for (i in 1:(dim(inputdf)[2]-1))
		{
		for (j in (i+1):dim(inputdf)[2])
			{
			species1.ab<-sum(inputdf[,i])
			species2.ab<-sum(inputdf[,j])
			if(species1.ab > 0 & species2.ab > 0)
				{
				test<-cor.test(inputdf[, i],inputdf[, j],method="spearman",na.action=na.rm)
				rho<-as.numeric(test$estimate)
				p.value<-as.numeric(test$p.value)
				}		
			if(species1.ab == 0 | species2.ab == 0)
				{
				rho<-0
				p.value<-1
				}
			new.row<-c(colnames(inputdf)[i],colnames(inputdf)[j],rho,p.value,species1.ab,species2.ab)
			results<-rbind(results,new.row)		
			}
			print(paste(i, "out of", dim(inputdf)[2], sep = " "))
		}
	results <- as.data.frame(results)
	colnames(results)<-c("ASV1","ASV2","rho","p.value","ab1","ab2")
	results
	}


ps2edgels <- function(inputps, inputp, inputrhoupper, inputrhobtm)
	{
	tempdf <- as.data.frame(as(otu_table(inputps),"matrix"))
	tempedgels <- df2edge(tempdf)
	tempedgels <- edgefltr(tempedgels, inputp, inputrhoupper, inputrhobtm)
	tempedgels
	}

# set rho and p thresholds to filter edge list 
edgefltr <- function(inputedgelst, inputp, inputrhoupper, inputrhobtm)
	{
	edgelstemp <- base::transform(inputedgelst, p.value = as.numeric(as.character(p.value)), rho = as.numeric(as.character(rho))) # 如果不加as.character，会变成莫名其妙的整数
	edgelstemp <- edgelstemp[edgelstemp[,"p.value"] < inputp,]
	edgelstemp <- edgelstemp[edgelstemp[,"rho"] < inputrhobtm|edgelstemp[,"rho"] > inputrhoupper,]
	edgelstemp
	}

